#!/usr/bin/env node

'use strict';

const chalk = require('chalk');
const fs = require('fs');
const markdownLinkCheck = require('./');
const needle = require('needle');
const path = require('path');
const pkg = require('./package.json');
const program = require('commander');
const url = require('url');

const statusLabels = {
    alive: chalk.green('✓'),
    dead: chalk.red('✖'),
    ignored: chalk.gray('/'),
    error: chalk.yellow('⚠'),
};

class Input {
    constructor(filenameForOutput, stream, opts) {
        this.filenameForOutput = filenameForOutput;
        this.stream = stream;
        this.opts = opts;
    }
}

function commaSeparatedCodesList(value, dummyPrevious) {
    return value.split(',').map(function(item) {
        return parseInt(item, 10);
    });
}

function getInputs() {
    const inputs = [];

    program
        .version(pkg.version)
        .option('-p, --progress', 'show progress bar')
        .option('-c, --config [config]', 'apply a config file (JSON), holding e.g. url specific header configuration')
        .option('-q, --quiet', 'displays errors only')
        .option('-v, --verbose', 'displays detailed error information')
        .option('-a, --alive <code>', 'comma separated list of HTTP codes to be considered as alive', commaSeparatedCodesList)
        .option('-r, --retry', 'retry after the duration indicated in \'retry-after\' header when HTTP code is 429')
        .arguments('[filenamesOrUrls...]')
        .action(function (filenamesOrUrls) {
            let filenameForOutput;
            let stream;

            if (!filenamesOrUrls.length) {
                // read from stdin unless a filename is given
                inputs.push(new Input(filenameForOutput, process.stdin, {}));
            }

            function onError(error) {
                console.error(chalk.red('\nERROR: Unable to connect! Please provide a valid URL as an argument.'));
                process.exit(1);
            }
            function onResponse(response) {
                if (response.statusCode === 404) {
                    console.error(chalk.red('\nERROR: 404 - File not found! Please provide a valid URL as an argument.'));
                    process.exit(1);
                }
            }

            for (const filenameOrUrl of filenamesOrUrls) {
                filenameForOutput = filenameOrUrl;
                let baseUrl = '';
                if (/https?:/.test(filenameOrUrl)) {
                    stream = needle.get(filenameOrUrl);
                    stream.on('error', onError);
                    stream.on('response', onResponse);
                    try { // extract baseUrl from supplied URL
                        const parsed = url.parse(filenameOrUrl);
                        delete parsed.search;
                        delete parsed.hash;
                        if (parsed.pathname.lastIndexOf('/') !== -1) {
                            parsed.pathname = parsed.pathname.substr(0, parsed.pathname.lastIndexOf('/') + 1);
                        }
                        baseUrl = url.format(parsed);
                    } catch (err) { /* ignore error */
                        }
                } else {
                    const stats = fs.statSync(filenameOrUrl);
                    if (stats.isDirectory()){
                        console.error(chalk.red('\nERROR: ' + filenameOrUrl + ' is a directory! Please provide a valid filename as an argument.'));
                        process.exit(1);
                    }
                    baseUrl = 'file://' + path.dirname(path.resolve(filenameOrUrl));
                    stream = fs.createReadStream(filenameOrUrl);
                }

                inputs.push(new Input(filenameForOutput, stream, {baseUrl: baseUrl}));
            }
        }
    ).parse(process.argv);

    for (const input of inputs) {
        input.opts.showProgressBar = (program.progress === true); // force true or undefined to be true or false.
        input.opts.quiet = (program.quiet === true);
        input.opts.verbose = (program.verbose === true);
        input.opts.retryOn429 = (program.retry === true);
        input.opts.aliveStatusCodes = program.alive;
        // set the projectBaseUrl to the current working directory, so that `{{BASEURL}}` can be resolved to the project root.
        input.opts.projectBaseUrl = `file://${process.cwd()}`;
    }

    return inputs;
}

async function loadConfig(config) {
    return new Promise((resolve, reject) => {
        fs.access(config, (fs.constants || fs).R_OK, function (err) {
            if (!err) {
                let configStream = fs.createReadStream(config);
                let configData = '';

                configStream.on('data', function (chunk) {
                    configData += chunk.toString();
                }).on('end', function () {
                    resolve(JSON.parse(configData));
                });
            }
            else {
                console.error(chalk.red('\nERROR: Config file not accessible.'));
                process.exit(1);
            }
        });
    });
}

async function processInput(filenameForOutput, stream, opts, data) {
    let markdown = ''; // collect the markdown data, then process it

    stream.on('error', function(error) {
        if (error.code === 'ENOENT') {
            console.error(chalk.red('\nERROR: File not found! Please provide a valid filename as an argument.'));
        } else {
            console.error(chalk.red(error));
        }
        return process.exit(1);
    });

    for await (const chunk of stream) {
        markdown += chunk.toString();
    }

    if (filenameForOutput) {
        console.log(chalk.cyan('\nFILE: ' + filenameForOutput));
    }

    if (program.config) {
        let config = await loadConfig(program.config);

        opts.ignorePatterns = config.ignorePatterns;
        opts.replacementPatterns = config.replacementPatterns;
        opts.httpHeaders = config.httpHeaders;
        opts.timeout = config.timeout;
        opts.ignoreDisable = config.ignoreDisable;
        opts.retryOn429 = config.retryOn429;
        opts.retryCount = config.retryCount;
        opts.fallbackRetryDelay = config.fallbackRetryDelay;
        opts.aliveStatusCodes = config.aliveStatusCodes;
    }

    await runMarkdownLinkCheck(markdown, opts, data);
}

async function runMarkdownLinkCheck(markdown, opts, data) {
    return new Promise((resolve, reject) => {
        markdownLinkCheck(markdown, opts, function (err, results) {
            if (err) {
                console.error(chalk.red('\n  ERROR: something went wrong!'));
                console.error(err.stack);
                reject();
            }

            if (results.length === 0 && !opts.quiet) {
                console.log(chalk.yellow('  No hyperlinks found!'));
            }
            results.forEach(function (result) {
                // Skip messages for non-deadlinks in quiet mode.
                if (opts.quiet && result.status !== 'dead') {
                    return;
                }

                if (opts.verbose) {
                    if (result.err) {
                        console.log('  [%s] %s → Status: %s %s', statusLabels[result.status], result.link, result.statusCode, result.err);
                    } else {
                        console.log('  [%s] %s → Status: %s', statusLabels[result.status], result.link, result.statusCode);
                    }
                }
                else {
                    console.log('  [%s] %s', statusLabels[result.status], result.link);
                }
            });
            console.log('\n  %s links checked.', results.length);
            if (results.some((result) => result.status === 'dead')) {
                let deadLinks = results.filter(result => { return result.status === 'dead'; });
                console.warn(chalk.yellow('\n  WARN: %s dead links found!'), deadLinks.length);
                deadLinks.forEach(function (result) {
                    console.log('  [%s] %s → Status: %s', statusLabels[result.status], result.link, result.statusCode);
                    addBrokenLink(data, result.link);
                });
                // reject();
            }

            resolve();
        });
    });
}

async function readJsonFile(filename) {
    // const filePath = path.join(__dirname, '..', '..', filename);
    const rootDir = process.cwd();
    const filePath = path.join(rootDir, filename);
    try {
        const data = fs.readFileSync(filePath);
        return JSON.parse(data);
    } catch (err) {
        console.error(`Error reading file from ${filePath}: ${err}`);
        return null;
    }
}

async function writeJsonFile(filename, data) {
    const rootDir = process.cwd();
    const filePath = path.join(rootDir, filename);
    try {
        fs.writeFileSync(filePath, JSON.stringify(data, null, 4));
    } catch (err) {
        console.error(`Error writing file to ${filePath}: ${err}`);
        return null;
    }
}

function addBrokenLink(data, link) {
    if (link in data) {
        data[link].latest_date = new Date().toISOString().split('T')[0];
    } else {
        data[link] = {
            initial_date: new Date().toISOString().split('T')[0],
            latest_date: new Date().toISOString().split('T')[0],
            broken: false
        };
    }
}

async function main() {
    const inputs = getInputs();

    // read json and store it in data variable
    const data = await readJsonFile('data.json');

    let isOk = true;
    for await (const input of inputs) {
        try {
            await processInput(input.filenameForOutput, input.stream, input.opts, data);
            await writeJsonFile('data.json', data);
        } catch (err) {
            isOk = false;
        }
    }
    process.exit(isOk ? 0 : 1);
}

main();